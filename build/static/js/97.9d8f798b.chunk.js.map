{"version":3,"sources":["views/pages/manage-ticket-wingo/index.js"],"names":["ManageTicketWinGo","intl","useState","searchText","setSearchText","items","setItems","total","setTotal","filter","betRecordType","skip","limit","order","key","value","paramsFilter","setParamsFilter","isLoading","setIsLoading","modal","setModal","dataSelected","setDataSelected","setBetRecordType","getData","params","newParams","betService","find","then","result","data","catch","toast","error","formatMessage","id","finally","useEffect","serverSideColumns","name","selector","maxWidth","cell","currentType","getGameWinGoTypes","item","label","row","betRecordAmountIn","toLocaleString","style","currency","betRecordAmountOut","firstName","lastName","createdAt","moment","utc","format","className","onClick","event","preventDefault","size","placement","target","onFilter","newFilter","inputSearchValue","setInputSearchValue","refId","placeholder","dropdownValue","setDropdownValue","currentDropdownValue","onSearch","lastValueSection","rangePicker","onPickDate","values","length","startDate","toISOString","endDate","progressPending","noHeader","pagination","paginationServer","highlightOnHover","persistTableHead","noDataComponent","columns","paginationComponent","count","Number","Math","ceil","toFixed","previousLabel","nextLabel","breakLabel","pageCount","marginPagesDisplayed","pageRangeDisplayed","activeClassName","forcePage","onPageChange","page","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","breakClassName","breakLinkClassName","containerClassName","sortIcon","gameName","injectIntl","memo"],"mappings":"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","file":"static/js/97.9d8f798b.chunk.js","sourcesContent":["import React from \"react\";\nimport { Fragment, memo, useState, useEffect } from \"react\";\nimport { injectIntl } from \"react-intl\";\nimport DataTable from \"react-data-table-component\";\nimport { ChevronDown, Eye } from \"react-feather\";\nimport betService from \"../../../services/betService.js\";\nimport ReactPaginate from \"react-paginate\";\nimport { toast } from \"react-toastify\";\nimport _ from \"lodash\";\nimport \"@styles/react/libs/tables/react-dataTable-component.scss\";\nimport moment from 'moment'\nimport {\n  Card, Label, Row, Col, Modal, ModalHeader, ModalBody,\n  Button, FormGroup, Form, UncontrolledTooltip\n} from 'reactstrap'\nimport SearchNav from \"../../components/searchNav\";\nimport { getGameWinGoTypes } from \"../../../constants/gameTypes\";\nimport ModalDetailTicket from \"../../components/detailTicket\";\n\nfunction ManageTicketWinGo({ intl }) {\n  const DefaultFilter = {\n    filter: {\n      betRecordType: 'WINGO1'\n    },\n    skip: 0,\n    limit: 20,\n    order: {\n      key: \"createdAt\",\n      value: \"desc\",\n    },\n  };\n  const [searchText, setSearchText] = useState()\n  const [items, setItems] = useState([]);\n  const [total, setTotal] = useState(20);\n  const [paramsFilter, setParamsFilter] = useState(DefaultFilter);\n  const [isLoading, setIsLoading] = useState(false);\n  const [modal, setModal] = useState(false)\n  const [dataSelected, setDataSelected] = useState({})\n  const [betRecordType, setBetRecordType] = useState(\"WINGO1\")\n\n  function getData(params) {\n    const newParams = {\n      ...params,\n    };\n    betService.find(newParams)\n      .then((result) => {\n        setItems(result.data);\n        setTotal(result.total);\n      })\n      .catch(() => {\n        toast.error(\n          intl.formatMessage({ id: \"an_error_occurred\" }) +\n          \" \" +\n          intl.formatMessage({ id: \"please_come_back_late\" })\n        );\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }\n\n  useEffect(() => {\n    getData(paramsFilter);\n  }, []);\n\n\n  const serverSideColumns = [\n    {\n      name: \"ID\",\n      selector: \"betRecordId\",\n      maxWidth: \"50px\"\n    },\n    {\n      name: intl.formatMessage({ id: \"ticket_buy\" }),\n      maxWidth: \"150px\",\n      cell: () => {\n        let currentType = getGameWinGoTypes(intl).find(item => item.value === betRecordType)\n        return \"Win Go - \" + currentType?.label || intl.formatMessage({ id: \"minutes\" }, { val: 1 })\n      }\n    },\n    {\n      name: intl.formatMessage({ id: 'section_name' }),\n      selector: \"betRecordSection\"\n    },\n    {\n      name: intl.formatMessage({ id: 'amount_in' }),\n      cell: (row) => {\n        if (row.betRecordAmountIn) {\n          return row.betRecordAmountIn.toLocaleString('it-IT', { style: 'currency', currency: 'VND' });\n        } else {\n          return ''\n        }\n      }\n    },\n    {\n      name: intl.formatMessage({ id: 'amount_out' }),\n      cell: (row) => {\n        if (row.betRecordAmountOut) {\n          return row.betRecordAmountOut.toLocaleString('it-IT', { style: 'currency', currency: 'VND' });\n        } else {\n          return '0'\n        }\n      }\n    },\n    {\n      name: intl.formatMessage({ id: 'buyer' }),\n      maxWidth: \"150px\",\n      cell: (row) => {\n        const { firstName, lastName } = row\n        return (\n          <div>\n            {firstName} {lastName}\n          </div>\n        )\n      }\n    },\n    {\n      name: intl.formatMessage({ id: 'createdAt' }),\n      selector: \"time\",\n      maxWidth: \"150px\",\n      cell: (row) => {\n        const { createdAt } = row;\n        return <div>{moment.utc(moment(createdAt)).format(\"DD/MM/YYYY\")}</div>;\n      },\n    },\n    {\n      name: \"\",\n      cell: (row) => {\n        return (\n\n          <div className=\"d-flex align-items-center\">\n            <span\n              className=\"full-width ml-2 cursor-pointer\"\n              onClick={(event) => {\n                event.preventDefault();\n                setDataSelected(row)\n                setModal(true)\n              }}\n            >\n              <Eye size={15} id={\"detail\"} />{\" \"}\n              <UncontrolledTooltip placement=\"top\" target={\"detail\"}>\n                {intl.formatMessage({ id: \"detail_ticket\" })}\n              </UncontrolledTooltip>\n            </span>\n          </div>\n        )\n      }\n    },\n    // {\n    //   name: intl.formatMessage({ id: 'note' }),\n    //   selector: \"gameRecordNote\",\n    //   maxWidth: \"150px\",\n    // },\n    // {\n    //   name: '',\n    //   selector: 'action',\n    //   cell: (row) => {\n    //     return (\n    //       // <UncontrolledDropdown className='action-view'>\n    //       //   <div className='flex-row'>\n\n    //       //     <DropdownToggle className='icon-btn hide-arrow' color='transparent' size='sm' caret>\n    //       //       <MoreVertical size={15} />\n    //       //     </DropdownToggle>\n    //       //   </div>\n\n\n    //       //   <DropdownMenu right>\n    //       //     {\n    //       //       <DropdownItem onClick={e => {\n    //       //         setDataSelected(row)\n    //       //         setModal(true)\n    //       //       }}>\n    //       //         <Edit className='mr-50' size={15} /> <span className='align-middle'>\n    //       //           {intl.formatMessage({ id: \"edit_game_record\" })}\n    //       //         </span>\n    //       //       </DropdownItem>\n    //       //     }\n    //       //   </DropdownMenu>\n    //       // </UncontrolledDropdown>\n    //       <Edit\n    //         className='cursor-pointer'\n    //         size={15} onClick={() => {\n    //           setDataSelected(row)\n    //           setModal(true)\n    //         }}\n    //       />\n    //     )\n    //   }\n    // }\n\n\n  ];\n\n  const handlePagination = (page) => {\n    const newParams = {\n      ...paramsFilter,\n      skip: page.selected * paramsFilter.limit,\n    };\n    getData(newParams);\n    setParamsFilter(newParams);\n  };\n\n  const CustomPagination = () => {\n    const count = Number(Math.ceil(total / paramsFilter.limit).toFixed(0));\n\n    return (\n      <ReactPaginate\n        previousLabel={\"\"}\n        nextLabel={\"\"}\n        breakLabel=\"...\"\n        pageCount={count || 1}\n        marginPagesDisplayed={2}\n        pageRangeDisplayed={2}\n        activeClassName=\"active\"\n        forcePage={paramsFilter.skip / paramsFilter.limit}\n        onPageChange={(page) => handlePagination(page)}\n        pageClassName={\"page-item\"}\n        nextLinkClassName={\"page-link\"}\n        nextClassName={\"page-item next\"}\n        previousClassName={\"page-item prev\"}\n        previousLinkClassName={\"page-link\"}\n        pageLinkClassName={\"page-link\"}\n        breakClassName=\"page-item\"\n        breakLinkClassName=\"page-link\"\n        containerClassName={\n          \"pagination react-paginate separated-pagination pagination-sm justify-content-end pr-1 mt-1\"\n        }\n      />\n    );\n  };\n\n  const onFilter = (newFilter) => {\n    setParamsFilter(newFilter)\n    getData(newFilter)\n  }\n\n  return (\n    <Fragment>\n      <Card className=\"p-1\">\n        <SearchNav\n          inputSearchValue={searchText}\n          setInputSearchValue={(value) => setSearchText(value)}\n          refId=\"wingo_ref_search\"\n          placeholder={intl.formatMessage({ id: \"search\" }) + ' ' + intl.formatMessage({ id: \"buyer\" })}\n          dropdownValue={getGameWinGoTypes(intl)}\n          setDropdownValue={(value) => {\n            paramsFilter.filter.betRecordType = value\n            setParamsFilter(paramsFilter)\n            setBetRecordType(value)\n            getData(paramsFilter)\n          }}\n          currentDropdownValue={betRecordType}\n          onSearch={(lastValueSection) => {\n            onFilter({\n              ...paramsFilter,\n              searchText: lastValueSection\n            })\n          }}\n          rangePicker\n          onPickDate={(values) => {\n            if (values && values.length === 2) {\n              onFilter({\n                ...paramsFilter,\n                startDate: moment(values[0]).toISOString(),\n                endDate: moment(values[1]).toISOString()\n              })\n            }\n          }}\n        />\n        {/* <AlertCurrentSection\n          data={lastGameRecord}\n          onSubmit={onUpdate}\n          length={5}\n        /> */}\n        <DataTable\n          progressPending={isLoading}\n          noHeader\n          pagination\n          paginationServer\n          highlightOnHover\n          persistTableHead\n          noDataComponent={<span className=\"mt-2\">{intl.formatMessage({ id: \"table_empty\" })}</span>}\n          className=\"react-dataTable\"\n          columns={serverSideColumns}\n          paginationComponent={CustomPagination}\n          sortIcon={<ChevronDown size={10} />}\n          data={items}\n        />\n      </Card>\n\n      <ModalDetailTicket\n        modal={modal}\n        setModal={setModal}\n        dataSelected={dataSelected}\n        intl={intl}\n        gameName={intl.formatMessage({ id: \"game_name\" }) + \": Win Go - \" + getGameWinGoTypes(intl).find(item => item.value === betRecordType).label}\n      />\n    </Fragment >\n  );\n}\n\nexport default injectIntl(memo(ManageTicketWinGo));\n"],"sourceRoot":""}