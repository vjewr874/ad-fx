{"version":3,"sources":["../node_modules/reactstrap/es/CardBody.js","services/withdrawHistoryService.js","../node_modules/reactstrap/es/CardText.js","views/pages/manager-transaction/withdrawBTC/detailWithdrawBTC.js"],"names":["propTypes","tag","tagPropType","className","PropTypes","string","cssModule","object","innerRef","oneOfType","func","CardBody","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","ref","defaultProps","WithdrawHistory","params","Promise","resolve","reject","Request","send","method","path","data","then","result","statusCode","message","id","error","Error","catch","CardText","DetailWithdrawBTCHistory","intl","open","toggleSidebar","arrData","onReloadData","handleRefused","paymentWithdrawTransactionId","denyWithdrawTransaction","toast","warn","formatMessage","err","isOpen","toggle","firstName","size","username","lastName","email","phoneNumber","diachiviBTC","paymentRef","appUserMembershipTitle","createdAt","moment","utc","format","paymentStatus","paymentApproveDate","status","getPaymentStatusDescription","paymentAmount","parseFloat","Number","toFixed","Ripple","color","type","onClick","event","preventDefault","approveWithdrawTransaction","success","handleApprove","outline","elements","injectIntl","memo"],"mappings":"mJAAA,6EAMIA,EAAY,CACdC,IAAKC,IACLC,UAAWC,IAAUC,OACrBC,UAAWF,IAAUG,OACrBC,SAAUJ,IAAUK,UAAU,CAACL,IAAUG,OAAQH,IAAUC,OAAQD,IAAUM,QAM3EC,EAAW,SAAkBC,GAC/B,IAAIT,EAAYS,EAAMT,UAClBG,EAAYM,EAAMN,UAClBE,EAAWI,EAAMJ,SACjBK,EAAMD,EAAMX,IACZa,EAAaC,YAA8BH,EAAO,CAAC,YAAa,YAAa,WAAY,QAEzFI,EAAUC,YAAgBC,IAAWf,EAAW,aAAcG,GAClE,OAAoBa,IAAMC,cAAcP,EAAKQ,YAAS,GAAIP,EAAY,CACpEX,UAAWa,EACXM,IAAKd,MAITG,EAASX,UAAYA,EACrBW,EAASY,aAnBU,CACjBtB,IAAK,OAmBQU,O,6HC9BMa,E,+IACnB,WAAiCC,GAAjC,0FACS,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,IAAQC,KAAK,CACXC,OAAQ,OACRC,KAAM,mCACNC,KAAKR,IACJS,MAAK,SAAAC,GAAU,IACRC,EAA4BD,EAA5BC,WAAYH,EAAgBE,EAAhBF,KAAKI,EAAWF,EAAXE,QACP,MAAfD,EACDT,EAAQM,GAERL,EAAOS,UAXf,2C,qIAiBA,WAAuCC,GAAvC,0FACS,IAAIZ,SAAQ,SAACC,EAASC,GAC3BC,IAAQC,KAAK,CACXC,OAAQ,OACRC,KAAM,uCACNC,KAAM,CACJK,GAAIA,KAELJ,MAAK,SAAAC,GAAU,IACRC,EAA4BD,EAA5BC,WAAYH,EAAgBE,EAAhBF,KAAKI,EAAWF,EAAXE,QACP,MAAfD,EACDT,EAAQM,GAERL,EAAOS,UAbf,2C,sIAmBA,WAAwCZ,GAAxC,0FACS,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,IAAQC,KAAK,CACXC,OAAQ,OACRC,KAAM,yDACNC,KAAKR,IACJS,MAAK,SAAAC,GAAU,IACRC,EAA4BD,EAA5BC,WAAYH,EAAgBE,EAAhBF,KAAKI,EAAWF,EAAXE,QACP,MAAfD,EACDT,EAAQM,GAERL,EAAOS,UAXf,2C,mIAgBA,WAAqCZ,GAArC,0FACS,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,IAAQC,KAAK,CACXC,OAAQ,OACRC,KAAM,sDACNC,KAAKR,IACJS,MAAK,SAAAC,GAAU,IACRC,EAA4BD,EAA5BC,WAAYH,EAAgBE,EAAhBF,KAAKI,EAAWF,EAAXE,QACP,MAAfD,EACDT,EAAQM,GAERL,EAAOS,UAXf,2C,iIAiBA,WAAmCZ,GAAnC,0FACS,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,IAAQC,KAAK,CACXC,OAAQ,OACRC,KAAM,qCACNC,KAAMR,IACLS,MAAK,SAACC,GAAY,IACXC,EAAsBD,EAAtBC,WAAYG,EAAUJ,EAAVI,MACpB,GAAmB,MAAfH,EACF,OAAOT,IAEPC,EAAO,IAAIY,MAAMD,OAElBE,OAAM,SAAAF,GACPX,EAAOW,UAdb,2C,gGCxEF,6EAMIvC,EAAY,CACdC,IAAKC,IACLC,UAAWC,IAAUC,OACrBC,UAAWF,IAAUG,QAMnBmC,EAAW,SAAkB9B,GAC/B,IAAIT,EAAYS,EAAMT,UAClBG,EAAYM,EAAMN,UAClBO,EAAMD,EAAMX,IACZa,EAAaC,YAA8BH,EAAO,CAAC,YAAa,YAAa,QAE7EI,EAAUC,YAAgBC,IAAWf,EAAW,aAAcG,GAClE,OAAoBa,IAAMC,cAAcP,EAAKQ,YAAS,GAAIP,EAAY,CACpEX,UAAWa,MAIf0B,EAAS1C,UAAYA,EACrB0C,EAASnB,aAjBU,CACjBtB,IAAK,KAiBQyC,O,iCC7Bf,0NA2BA,SAASC,EAAT,GAMI,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,KACAC,EAGC,EAHDA,cACAC,EAEC,EAFDA,QACAC,EACC,EADDA,aAuEA,IAAMC,EAAgB,WACpB,IAAMxB,EAAS,CACba,GAAIS,EAAQG,8BAEd1B,IAAgB2B,wBAAwB1B,GACrCS,MAAK,SAACC,GACLa,IACAI,IAAMC,KACJT,EAAKU,cAAc,CAAEhB,GAAI,wCAG5BG,OAAM,SAACc,GACNH,IAAMC,KAAKT,EAAKU,cAAc,CAAEhB,GAAI,gBAAkBiB,QAI5D,OACE,cAAC,WAAD,UACE,eAAC,IAAD,CACEC,OAAQX,EACRY,OAAQX,EACR3C,UAAS,yBAHX,UAKE,eAAC,IAAD,CAAasD,OAAQX,EAArB,UACGF,EAAKU,cAAc,CAAEhB,GAAI,gBAD5B,IAC+CS,EAAQW,aAEvD,cAAC,IAAD,UACE,eAAC,IAAD,WACE,6BAAKd,EAAKU,cAAc,CAAEhB,GAAI,4BAC9B,sBAAKnC,UAAU,OAAf,UACE,eAAC,IAAD,CAAKA,UAAU,eAAf,UACE,sBAAKA,UAAU,oCAAf,UACE,cAAC,IAAD,CAAMA,UAAU,OAAOwD,KAAM,KAC7B,eAAC,IAAD,CAAU1D,IAAI,OAAOE,UAAU,mBAA/B,UACGyC,EAAKU,cAAc,CAClBhB,GAAI,iCAFR,UAOF,qBAAKnC,UAAU,6BAAf,SACE,cAAC,IAAD,UAC4C,OAAzC4C,EAAQG,6BACL,GACAH,EAAQG,oCAIlB,eAAC,IAAD,CAAK/C,UAAU,eAAf,UACE,sBAAKA,UAAU,oCAAf,UACE,cAAC,IAAD,CAAMA,UAAU,OAAOwD,KAAM,KAC7B,eAAC,IAAD,CAAU1D,IAAI,OAAOE,UAAU,mBAA/B,UACGyC,EAAKU,cAAc,CAAEhB,GAAI,aAD5B,UAIF,qBAAKnC,UAAU,6BAAf,SACE,cAAC,IAAD,UACwB,OAArB4C,EAAQa,SAAoB,GAAKb,EAAQa,gBAIhD,eAAC,IAAD,CAAKzD,UAAU,eAAf,UACE,sBAAKA,UAAU,oCAAf,UACE,cAAC,IAAD,CAAMA,UAAU,OAAOwD,KAAM,KAC7B,eAAC,IAAD,CAAU1D,IAAI,OAAOE,UAAU,mBAA/B,UACGyC,EAAKU,cAAc,CAAEhB,GAAI,aAD5B,UAIF,qBAAKnC,UAAU,6BAAf,SACE,eAAC,IAAD,WACyB,OAAtB4C,EAAQW,UAAqB,GAAKX,EAAQW,UAAW,IAChC,OAArBX,EAAQc,SAAoB,GAAKd,EAAQc,iBAKhD,eAAC,IAAD,CAAK1D,UAAU,eAAf,UACE,sBAAKA,UAAU,oCAAf,UACE,cAAC,IAAD,CAAMA,UAAU,OAAOwD,KAAM,KAC7B,eAAC,IAAD,CAAU1D,IAAI,OAAOE,UAAU,mBAA/B,UACGyC,EAAKU,cAAc,CAAEhB,GAAI,UAD5B,UAIF,qBAAKnC,UAAU,6BAAf,SACE,cAAC,IAAD,UACqB,OAAlB4C,EAAQe,MAAiB,GAAKf,EAAQe,aAK7C,eAAC,IAAD,CAAK3D,UAAU,eAAf,UACE,sBAAKA,UAAU,oCAAf,UACE,cAAC,IAAD,CAAOA,UAAU,OAAOwD,KAAM,KAC9B,eAAC,IAAD,CAAU1D,IAAI,OAAOE,UAAU,mBAA/B,UACGyC,EAAKU,cAAc,CAAEhB,GAAI,gBAD5B,UAIF,qBAAKnC,UAAU,6BAAf,SACE,cAAC,IAAD,UAC2B,OAAxB4C,EAAQgB,YAAuB,GAAKhB,EAAQgB,mBAInD,eAAC,IAAD,CAAK5D,UAAU,eAAf,UACA,sBAAKA,UAAU,oCAAf,UACE,cAAC,IAAD,CAAMA,UAAU,OAAOwD,KAAM,KAC7B,eAAC,IAAD,CAAU1D,IAAI,OAAOE,UAAU,mBAA/B,UACGyC,EAAKU,cAAc,CAAEhB,GAAI,gBAD5B,UAIF,qBAAKnC,UAAU,6BAAf,SACE,cAAC,IAAD,UAC2B,OAAxB4C,EAAQiB,YACL,GACAjB,EAAQiB,mBAIlB,eAAC,IAAD,CAAK7D,UAAU,eAAf,UACI,sBAAKA,UAAU,oCAAf,UACE,cAAC,IAAD,CAAWA,UAAU,OAAOwD,KAAM,KAClC,eAAC,IAAD,CAAU1D,IAAI,OAAOE,UAAU,mBAA/B,UACGyC,EAAKU,cAAc,CAAEhB,GAAI,qBAD5B,UAIF,qBAAKnC,UAAU,6BAAf,SACE,cAAC,IAAD,UAC0B,OAAvB4C,EAAQkB,WAAsB,GAAKlB,EAAQkB,kBAIlD,eAAC,IAAD,CAAK9D,UAAU,eAAf,UACE,sBAAKA,UAAU,oCAAf,UACE,cAAC,IAAD,CAAWA,UAAU,OAAOwD,KAAM,KAClC,eAAC,IAAD,CAAU1D,IAAI,OAAOE,UAAU,mBAA/B,UACGyC,EAAKU,cAAc,CAAEhB,GAAI,oBAD5B,UAIF,qBAAKnC,UAAU,6BAAf,SACE,cAAC,IAAD,UACsC,OAAnC4C,EAAQmB,uBACLtB,EAAKU,cAAc,CAAEhB,GAAI,eACzBS,EAAQmB,8BAmBlB,eAAC,IAAD,CAAK/D,UAAU,eAAf,UACE,sBAAKA,UAAU,oCAAf,UACE,cAAC,IAAD,CAAUA,UAAU,OAAOwD,KAAM,KACjC,eAAC,IAAD,CAAU1D,IAAI,OAAOE,UAAU,mBAA/B,UACGyC,EAAKU,cAAc,CAAEhB,GAAI,cAD5B,UAIF,qBAAKnC,UAAU,6BAAf,SACE,cAAC,IAAD,UACyB,OAAtB4C,EAAQoB,UACL,GACAC,IACGC,IAAID,IAAOrB,EAAQoB,YACnBG,OAAO,2BAIO,QAA1BvB,EAAQwB,eACP,eAAC,IAAD,CAAKpE,UAAU,eAAf,UACE,sBAAKA,UAAU,oCAAf,UACE,cAAC,IAAD,CAAUA,UAAU,OAAOwD,KAAM,KACjC,eAAC,IAAD,CAAU1D,IAAI,OAAOE,UAAU,mBAA/B,UACGyC,EAAKU,cAAc,CAAEhB,GAAI,uBAD5B,UAIF,qBAAKnC,UAAU,6BAAf,SACE,cAAC,IAAD,UACkC,OAA/B4C,EAAQyB,mBACL,GACAJ,IACGC,IAAID,IAAOrB,EAAQyB,qBACnBF,OAAO,2BAKtB,eAAC,IAAD,CAAKnE,UAAU,eAAf,UACE,sBAAKA,UAAU,oCAAf,UACE,cAAC,IAAD,CAAMA,UAAU,OAAOwD,KAAM,KAC7B,eAAC,IAAD,CAAU1D,IAAI,OAAOE,UAAU,mBAA/B,UACGyC,EAAKU,cAAc,CAAEhB,GAAI,WAD5B,UAIF,qBAAKnC,UAAU,6BAAf,SACE,cAAC,IAAD,UACG4C,EAAQwB,cAlRS,SAACE,GACnC,OAAQA,GACN,IAAK,YACH,OAAO7B,EAAKU,cAAc,CAAEhB,GAAI,cAClC,IAAK,MACH,OAAOM,EAAKU,cAAc,CAAEhB,GAAI,QAClC,IAAK,WACH,OAAOM,EAAKU,cAAc,CAAEhB,GAAI,aAClC,QACE,MAAO,OA0QSoC,CAA4B3B,EAAQwB,eACpC,UAIV,eAAC,IAAD,CAAKpE,UAAU,eAAf,UACE,sBAAKA,UAAU,oCAAf,UACE,cAAC,IAAD,CAAYA,UAAU,OAAOwD,KAAM,KACnC,eAAC,IAAD,CAAU1D,IAAI,OAAOE,UAAU,mBAA/B,UACGyC,EAAKU,cAAc,CAAEhB,GAAI,mBAD5B,UAIF,sBAAKnC,UAAU,oCAAf,UACE,cAAC,IAAD,UACG4C,EAAQ4B,cACLC,WAAWC,OAAO9B,EAAQ4B,eAAeG,QAAQ,IACjD,KAEN,cAAC,IAAD,CAAU7E,IAAI,OAAOE,UAAU,OAA/B,SACGyC,EAAKU,cAAc,CAAEhB,GAAI,mBAMlC,cAAC,IAAD,CAAWnC,UAAU,OAArB,SA/RO,WACf,OAAQ4C,EAAQwB,eACd,IAAK,MACH,OACE,gCACE,cAAC,IAAOQ,OAAR,CACE5E,UAAU,OACV6E,MAAM,UACNC,KAAK,SACLC,QAAS,SAACC,GACRA,EAAMC,iBA6BpB,WACE,IAAM3D,EAAS,CACba,GAAIS,EAAQG,8BAEd1B,IAAgB6D,2BAA2B5D,GACxCS,MAAK,WACJc,IACAI,IAAMkC,QACJ1C,EAAKU,cAAc,CAAEhB,GAAI,wCAG5BG,OAAM,SAACc,GACNH,IAAMkC,QAAQ1C,EAAKU,cAAc,CAAEhB,GAAI,iBAAmBiB,MAxClDgC,IAEFC,SAAO,EART,SAUE,sBAAMrF,UAAU,OAAhB,SACGyC,EAAKU,cAAc,CAAEhB,GAAI,yBAG9B,cAAC,IAAOyC,OAAR,CACEC,MAAM,SACNC,KAAK,SACLC,QAAS,SAACC,GACRA,EAAMC,iBACNnC,KAEFuC,SAAO,EAPT,SASE,sBAAMrF,UAAU,OAAhB,SACGyC,EAAKU,cAAc,CAAEhB,GAAI,yBAKpC,QACE,QA4PiCmD,eAO1BC,sBAAWC,eAAKhD","file":"static/js/80.bf1b04b8.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardBody = function CardBody(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      innerRef = props.innerRef,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"innerRef\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-body'), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nCardBody.propTypes = propTypes;\nCardBody.defaultProps = defaultProps;\nexport default CardBody;","import Request from './request'\n\nexport default class WithdrawHistory {\n  static async findWithdrawHistory(params) {\n    return new Promise((resolve, reject) => { \n      Request.send({\n        method: \"POST\",\n        path: \"/PaymentWithdrawTransaction/find\",\n        data:params\n      }).then(result =>{ \n        const { statusCode, data,message} = result\n        if(statusCode === 200) {\n          resolve(data)\n        } else {\n          reject(message)\n        }\n      })\n    })\n  }\n\n  static async findDetailWithdrawHistory(id) {\n    return new Promise((resolve, reject) => { \n      Request.send({\n        method: \"POST\",\n        path: \"/PaymentWithdrawTransaction/findById\",\n        data: {\n          id: id,\n        }\n      }).then(result =>{ \n        const { statusCode, data,message} = result\n        if(statusCode === 200) {\n          resolve(data)\n        } else {\n          reject(message)\n        }\n      })\n    })\n  }\n\n  static async approveWithdrawTransaction(params) {\n    return new Promise((resolve, reject) => { \n      Request.send({\n        method: \"POST\",\n        path: \"/PaymentWithdrawTransaction/approveWithdrawTransaction\",\n        data:params\n      }).then(result =>{ \n        const { statusCode, data,message} = result\n        if(statusCode === 200) {\n          resolve(data)\n        } else {\n          reject(message)\n        }\n      })\n    })\n  }\n  static async denyWithdrawTransaction(params) {\n    return new Promise((resolve, reject) => { \n      Request.send({\n        method: \"POST\",\n        path: \"/PaymentWithdrawTransaction/denyWithdrawTransaction\",\n        data:params\n      }).then(result =>{ \n        const { statusCode, data,message} = result\n        if(statusCode === 200) {\n          resolve(data)\n        } else {\n          reject(message)\n        }\n      })\n    })\n  }\n\n  static async insertPaymentWithdraw(params) {\n    return new Promise((resolve, reject) => {\n      Request.send({\n        method: \"POST\",\n        path: \"/PaymentWithdrawTransaction/insert\",\n        data: params, \n      }).then((result) => {\n        const { statusCode, error } = result;\n        if (statusCode === 200) {\n          return resolve();\n        } else {\n          reject(new Error(error));\n        }\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'p'\n};\n\nvar CardText = function CardText(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-text'), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardText.propTypes = propTypes;\nCardText.defaultProps = defaultProps;\nexport default CardText;","import React, { memo } from \"react\";\nimport { injectIntl } from \"react-intl\";\nimport { Fragment } from \"react\";\nimport {\n  Calendar,\n  DollarSign,\n  User,\n  Star,\n  Flag,\n  Phone,\n  UserCheck,\n} from \"react-feather\";\nimport {\n  CardBody,\n  CardText,\n  Button,\n  Row,\n  FormGroup,\n  ModalBody,\n  Modal,\n  ModalHeader,\n} from \"reactstrap\";\nimport moment from \"moment\";\nimport { addCommas } from \"@utils\";\nimport WithdrawHistory from \"../../../../services/withdrawHistoryService\";\nimport { toast } from \"react-toastify\";\n\nfunction DetailWithdrawBTCHistory({\n  intl,\n  open,\n  toggleSidebar,\n  arrData,\n  onReloadData,\n}) {\n\n  const getPaymentStatusDescription = (status) => {\n    switch (status) {\n      case \"Completed\":\n        return intl.formatMessage({ id: \"Completed\" });\n      case \"New\":\n        return intl.formatMessage({ id: \"New\" });\n      case \"Canceled\":\n        return intl.formatMessage({ id: \"Canceled\" });\n      default:\n        return \"N/A\";\n    }\n  };\n\n  const elements = () => {\n    switch (arrData.paymentStatus) {\n      case \"New\":\n        return (\n          <div>\n            <Button.Ripple\n              className=\"mr-3\"\n              color=\"primary\"\n              type=\"submit\"\n              onClick={(event) => {\n                event.preventDefault();\n                handleApprove()\n              }}\n              outline\n            >\n              <span className=\"mr-1\">\n                {intl.formatMessage({ id: \"approve_withdraw\" })}\n              </span>\n            </Button.Ripple>\n            <Button.Ripple\n              color=\"danger\"\n              type=\"submit\"\n              onClick={(event) => {\n                event.preventDefault();\n                handleRefused()\n              }}\n              outline\n            >\n              <span className=\"mr-1\">\n                {intl.formatMessage({ id: \"deny_withdraw\" })}\n              </span>\n            </Button.Ripple>\n          </div>\n        );\n      default:\n        return;\n    }\n  };\n\n  function handleApprove() {\n    const params = {\n      id: arrData.paymentWithdrawTransactionId,\n    };\n    WithdrawHistory.approveWithdrawTransaction(params)\n      .then(() => {\n        onReloadData();\n        toast.success(\n          intl.formatMessage({ id: \"update_approve_withdraw_success\" })\n        );\n      })\n      .catch((err) => {\n        toast.success(intl.formatMessage({ id: \"actionFailed\" }), err);\n      });\n  }\n\n  const handleRefused = () => {\n    const params = {\n      id: arrData.paymentWithdrawTransactionId,\n    };\n    WithdrawHistory.denyWithdrawTransaction(params)\n      .then((result) => {\n        onReloadData();\n        toast.warn(\n          intl.formatMessage({ id: \"update_approve_withdraw_success\" })\n        );\n      })\n      .catch((err) => {\n        toast.warn(intl.formatMessage({ id: \"actionFailed\" }, err));\n      });\n  };\n\n  return (\n    <Fragment>\n      <Modal\n        isOpen={open}\n        toggle={toggleSidebar}\n        className={`modal-dialog modal-lg `}\n      >\n        <ModalHeader toggle={toggleSidebar}>\n          {intl.formatMessage({ id: \"detail_user\" })} {arrData.firstName}\n        </ModalHeader>\n        <ModalBody>\n          <CardBody>\n            <h2>{intl.formatMessage({ id: \"historyWithdrawByUser\" })}</h2>\n            <div className=\"my-2\">\n              <Row className=\"mx-auto mb-1\">\n                <div className=\"d-flex col-sm-5 col-md-4 col-lg-3\">\n                  <Star className=\"mr-1\" size={14} />\n                  <CardText tag=\"span\" className=\"font-weight-bold\">\n                    {intl.formatMessage({\n                      id: \"paymentWithdrawTransactionId\",\n                    })}\n                    :\n                  </CardText>\n                </div>\n                <div className=\"col-sm-7 col-md-6 col-lg-6\">\n                  <CardText>\n                    {arrData.paymentWithdrawTransactionId === null\n                      ? \"\"\n                      : arrData.paymentWithdrawTransactionId}\n                  </CardText>\n                </div>\n              </Row>\n              <Row className=\"mx-auto mb-1\">\n                <div className=\"d-flex col-sm-5 col-md-4 col-lg-3\">\n                  <User className=\"mr-1\" size={14} />\n                  <CardText tag=\"span\" className=\"font-weight-bold\">\n                    {intl.formatMessage({ id: \"username\" })}:\n                  </CardText>\n                </div>\n                <div className=\"col-sm-7 col-md-6 col-lg-6\">\n                  <CardText>\n                    {arrData.username === null ? \"\" : arrData.username}\n                  </CardText>\n                </div>\n              </Row>\n              <Row className=\"mx-auto mb-1\">\n                <div className=\"d-flex col-sm-5 col-md-4 col-lg-3\">\n                  <Star className=\"mr-1\" size={14} />\n                  <CardText tag=\"span\" className=\"font-weight-bold\">\n                    {intl.formatMessage({ id: \"fullname\" })}:\n                  </CardText>\n                </div>\n                <div className=\"col-sm-7 col-md-6 col-lg-6\">\n                  <CardText>\n                    {arrData.firstName === null ? \"\" : arrData.firstName}{\" \"}\n                    {arrData.lastName === null ? \"\" : arrData.lastName}\n                  </CardText>\n                </div>\n              </Row>\n\n              <Row className=\"mx-auto mb-1\">\n                <div className=\"d-flex col-sm-5 col-md-4 col-lg-3\">\n                  <User className=\"mr-1\" size={14} />\n                  <CardText tag=\"span\" className=\"font-weight-bold\">\n                    {intl.formatMessage({ id: \"Email\" })}:\n                  </CardText>\n                </div>\n                <div className=\"col-sm-7 col-md-6 col-lg-6\">\n                  <CardText>\n                    {arrData.email === null ? \"\" : arrData.email}\n                  </CardText>\n                </div>\n              </Row>\n\n              <Row className=\"mx-auto mb-1\">\n                <div className=\"d-flex col-sm-5 col-md-4 col-lg-3\">\n                  <Phone className=\"mr-1\" size={14} />\n                  <CardText tag=\"span\" className=\"font-weight-bold\">\n                    {intl.formatMessage({ id: \"phoneNumber\" })}:\n                  </CardText>\n                </div>\n                <div className=\"col-sm-7 col-md-6 col-lg-6\">\n                  <CardText>\n                    {arrData.phoneNumber === null ? \"\" : arrData.phoneNumber}\n                  </CardText>\n                </div>\n              </Row>\n              <Row className=\"mx-auto mb-1\">\n              <div className=\"d-flex col-sm-5 col-md-4 col-lg-3\">\n                <User className=\"mr-1\" size={14} />\n                <CardText tag=\"span\" className=\"font-weight-bold\">\n                  {intl.formatMessage({ id: \"diachiviBTC\" })}:\n                </CardText>\n              </div>\n              <div className=\"col-sm-7 col-md-6 col-lg-6\">\n                <CardText>\n                  {arrData.diachiviBTC === null\n                    ? \"\"\n                    : arrData.diachiviBTC}\n                </CardText>\n              </div>\n            </Row>\n            <Row className=\"mx-auto mb-1\">\n                <div className=\"d-flex col-sm-5 col-md-4 col-lg-3\">\n                  <UserCheck className=\"mr-1\" size={14} />\n                  <CardText tag=\"span\" className=\"font-weight-bold\">\n                    {intl.formatMessage({ id: \"code_transaction\" })}:\n                  </CardText>\n                </div>\n                <div className=\"col-sm-7 col-md-6 col-lg-6\">\n                  <CardText>\n                    {arrData.paymentRef === null ? \"\" : arrData.paymentRef}\n                  </CardText>\n                </div>\n              </Row>\n              <Row className=\"mx-auto mb-1\">\n                <div className=\"d-flex col-sm-5 col-md-4 col-lg-3\">\n                  <UserCheck className=\"mr-1\" size={14} />\n                  <CardText tag=\"span\" className=\"font-weight-bold\">\n                    {intl.formatMessage({ id: \"memberLevelName\" })}:\n                  </CardText>\n                </div>\n                <div className=\"col-sm-7 col-md-6 col-lg-6\">\n                  <CardText>\n                    {arrData.appUserMembershipTitle === null\n                      ? intl.formatMessage({ id: \"new_member\" })\n                      : arrData.appUserMembershipTitle}\n                  </CardText>\n                </div>\n              </Row>\n\n              {/* <Row className=\"mx-auto mb-1\">\n                <div className=\"d-flex col-sm-5 col-md-4 col-lg-3\">\n                  <UserCheck className=\"mr-1\" size={14} />\n                  <CardText tag=\"span\" className=\"font-weight-bold\">\n                    {intl.formatMessage({ id: \"paymentPICId\" })}:\n                  </CardText>\n                </div>\n                <div className=\"col-sm-7 col-md-6 col-lg-6\">\n                  <CardText>\n                    {arrData.paymentPICId === null ? \"\" : arrData.paymentPICId}\n                  </CardText>\n                </div>\n              </Row> */}\n\n              <Row className=\"mx-auto mb-1\">\n                <div className=\"d-flex col-sm-5 col-md-4 col-lg-3\">\n                  <Calendar className=\"mr-1\" size={14} />\n                  <CardText tag=\"span\" className=\"font-weight-bold\">\n                    {intl.formatMessage({ id: \"createdAt\" })}:\n                  </CardText>\n                </div>\n                <div className=\"col-sm-7 col-md-6 col-lg-6\">\n                  <CardText>\n                    {arrData.createdAt === null\n                      ? \"\"\n                      : moment\n                          .utc(moment(arrData.createdAt))\n                          .format(\"HH:mm DD/MM/YYYY\")}\n                  </CardText>\n                </div>\n              </Row>\n              {arrData.paymentStatus !== \"New\" && (\n                <Row className=\"mx-auto mb-1\">\n                  <div className=\"d-flex col-sm-5 col-md-4 col-lg-3\">\n                    <Calendar className=\"mr-1\" size={14} />\n                    <CardText tag=\"span\" className=\"font-weight-bold\">\n                      {intl.formatMessage({ id: \"paymentApproveDate\" })}:\n                    </CardText>\n                  </div>\n                  <div className=\"col-sm-7 col-md-6 col-lg-6\">\n                    <CardText>\n                      {arrData.paymentApproveDate === null\n                        ? \"\"\n                        : moment\n                            .utc(moment(arrData.paymentApproveDate))\n                            .format(\"HH:mm DD/MM/YYYY\")}\n                    </CardText>\n                  </div>\n                </Row>\n              )}\n              <Row className=\"mx-auto mb-1\">\n                <div className=\"d-flex col-sm-5 col-md-4 col-lg-3\">\n                  <Flag className=\"mr-1\" size={14} />\n                  <CardText tag=\"span\" className=\"font-weight-bold\">\n                    {intl.formatMessage({ id: \"status\" })}:\n                  </CardText>\n                </div>\n                <div className=\"col-sm-7 col-md-6 col-lg-6\">\n                  <CardText>\n                    {arrData.paymentStatus\n                      ? getPaymentStatusDescription(arrData.paymentStatus)\n                      : \"\"}\n                  </CardText>\n                </div>\n              </Row>\n              <Row className=\"mx-auto mb-1\">\n                <div className=\"d-flex col-sm-5 col-md-4 col-lg-3\">\n                  <DollarSign className=\"mr-1\" size={14} />\n                  <CardText tag=\"span\" className=\"font-weight-bold\">\n                    {intl.formatMessage({ id: \"payment_amount\" })}:\n                  </CardText>\n                </div>\n                <div className=\"col-sm-7 col-md-6 col-lg-6 d-flex\">\n                  <CardText>\n                    {arrData.paymentAmount\n                      ? parseFloat(Number(arrData.paymentAmount).toFixed(6))\n                      : \"\"}\n                  </CardText>\n                  <CardText tag=\"span\" className=\"ml-1\">\n                    {intl.formatMessage({ id: \"BTC\" })}\n                  </CardText>\n                </div>\n              </Row>\n            </div>\n\n            <FormGroup className=\"mt-3\">{elements()}</FormGroup>\n          </CardBody>\n        </ModalBody>\n      </Modal>\n    </Fragment>\n  );\n}\nexport default injectIntl(memo(DetailWithdrawBTCHistory));\n"],"sourceRoot":""}