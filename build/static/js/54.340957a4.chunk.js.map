{"version":3,"sources":["views/pages/report-user/index.js","@core/components/widgets/stats/StatsWithAreaChart.js","@core/components/widgets/stats/ChartOptions.js","views/ui-elements/cards/statistics/SubscribersGained.js"],"names":["injectIntl","intl","useState","paramsFilter","context","useContext","ThemeColors","items","setItems","useEffect","params","newParams","StatisticalService","summaryUserReport","then","result","catch","toast","warn","formatMessage","id","getData","className","lg","sm","data","totalNewUsersByDate","title","icon","size","kFormatter","warning","colors","primary","main","totalNewUsersByWeek","color","success","totalNewUsersByMonth","totalNewUsersByYear","dark","totalUsers","secondary","countAllUserKYC","info","totalUserPaymentService","countUserMember","StatsWithAreaChart","props","stats","statTitle","series","options","type","height","rest","Card","CardBody","classnames","defaultProps","chart","toolbar","show","sparkline","enabled","grid","dataLabels","stroke","curve","width","fill","gradient","shadeIntensity","opacityFrom","opacityTo","stops","xaxis","labels","axisBorder","yaxis","tooltip","x","SubscribersGained","dataChart","setDataChart","axios","get","res"],"mappings":"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","file":"static/js/54.340957a4.chunk.js","sourcesContent":["// @ts-nocheck\nimport { useContext, useState, useEffect } from \"react\";\nimport { kFormatter } from \"@utils\";\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\";\nimport { Row, Col } from \"reactstrap\";\nimport { toast } from \"react-toastify\";\nimport { Users, User, ShoppingBag, Octagon } from \"react-feather\";\nimport SubscribersGained from \"@src/views/ui-elements/cards/statistics/SubscribersGained\";\nimport \"./index.scss\";\nimport \"@styles/react/libs/flatpickr/flatpickr.scss\";\nimport \"@styles/react/libs/charts/apex-charts.scss\";\nimport StatisticalService from \"../../../services/statisticalService\";\nimport { injectIntl } from \"react-intl\";\n\nconst ReportUser = ({ intl }) => {\n  const DefaultFilter = {};\n  const [paramsFilter, setParamsFilter] = useState(DefaultFilter);\n  const context = useContext(ThemeColors);\n  const [items, setItems] = useState({});\n\n  function getData(params) {\n    const newParams = {\n      ...params,\n    };\n    StatisticalService.summaryUserReport(newParams)\n      .then((result) => {\n        setItems(result);\n      })\n      .catch(() => {\n        toast.warn(intl.formatMessage({ id: \"an_error_occurred\" }));\n      });\n  }\n\n  useEffect(() => {\n    getData(paramsFilter);\n  }, []);\n\n\n  return (\n    <div id=\"dashboard-analytics\" className=\"p-1\">\n    <h3 className=\"my-2 ml-2\">{intl.formatMessage({id:\"report-user\"})}</h3>\n      <Row className=\"match-height dashboard\">\n        <Col lg=\"3\" sm=\"6\">\n          <SubscribersGained\n            data={items.totalNewUsersByDate || 0}\n            title={intl.formatMessage({ id: \"sum_user_daily\" })}\n            icon={<Users size={21} />}\n            kFormatter={kFormatter}\n            warning={context.colors.primary.main}\n          />\n        </Col>\n        <Col lg=\"3\" sm=\"6\">\n          <SubscribersGained\n            data={items.totalNewUsersByWeek || 0}\n            color={\"success\"}\n            title={intl.formatMessage({ id: \"sum_user_week\" })}\n            icon={<Users size={21} />}\n            kFormatter={kFormatter}\n            warning={context.colors.success.main}\n          />\n        </Col>\n\n        <Col lg=\"3\" sm=\"6\">\n          <SubscribersGained\n            data={items.totalNewUsersByMonth || 0}\n            color={\"warning\"}\n            title={intl.formatMessage({ id: \"sum_user_month\" })}\n            warning={context.colors.warning.main}\n            icon={<Users size={21} />}\n            kFormatter={kFormatter}\n          />\n        </Col>\n        <Col lg=\"3\" sm=\"6\">\n          <SubscribersGained\n            data={items.totalNewUsersByYear || 0}\n            color={\"light\"}\n            title={intl.formatMessage({ id: \"sum_user_year\" })}\n            icon={<Users size={21} />}\n            kFormatter={kFormatter}\n            warning={context.colors.dark.main}\n          />\n        </Col>\n      </Row>\n\n      <Row className=\"match-height dashboard\">\n        <Col lg=\"3\" sm=\"6\">\n          <SubscribersGained\n            data={items.totalUsers || 0}\n            title={intl.formatMessage({ id: \"sum_user_all\" })}\n            icon={<User size={21} />}\n            kFormatter={kFormatter}\n            warning={context.colors.secondary.main}\n          />\n        </Col>\n        <Col lg=\"3\" sm=\"6\">\n          <SubscribersGained\n            data={items.countAllUserKYC || 0}\n            color={\"success\"}\n            title={intl.formatMessage({ id: \"sum_user_kyc\" })}\n            icon={<User size={21} />}\n            kFormatter={kFormatter}\n            warning={context.colors.info.main}\n          />\n        </Col>\n\n        <Col lg=\"3\" sm=\"6\">\n          <SubscribersGained\n            data={items.totalUserPaymentService || 0}\n            color={\"warning\"}\n            title={intl.formatMessage({ id: \"sum_user_package\" })}\n            warning={context.colors.primary.main}\n            icon={<ShoppingBag size={21} />}\n            kFormatter={kFormatter}\n          />\n        </Col>\n        <Col lg=\"3\" sm=\"6\">\n          <SubscribersGained\n            data={items.countUserMember || 0}\n            color={\"light\"}\n            title={intl.formatMessage({ id: \"sum_organization\" })}\n            icon={<Octagon size={21} />}\n            kFormatter={kFormatter}\n            warning={context.colors.primary.main}\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default injectIntl(ReportUser);\n","// ** Custom Components\nimport Avatar from '@components/avatar'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport Chart from 'react-apexcharts'\nimport { Card, CardBody } from 'reactstrap'\n\n// ** Default Options\nimport { areaChartOptions } from './ChartOptions'\n\nconst StatsWithAreaChart = props => {\n  // ** Props\n  const { icon, color, stats, statTitle, series, options, type, height, className, ...rest } = props\n  return (\n    <Card {...rest}>\n      <CardBody\n        className={classnames('pb-0', {\n          [className]: className\n        })}\n      >\n        <Avatar className='avatar-stats p-50 m-0' color={`light-${color}`} icon={icon} />\n        <h2 className='font-weight-bolder mt-1'>{stats}</h2>\n        <p className='card-text'>{statTitle}</p>\n      </CardBody>\n      <Chart options={options} series={series} type={type} height={height ? height : 100} />\n    </Card>\n  )\n}\n\nexport default StatsWithAreaChart\n\n// ** PropTypes\nStatsWithAreaChart.propTypes = {\n  icon: PropTypes.element.isRequired,\n  color: PropTypes.string.isRequired,\n  stats: PropTypes.string.isRequired,\n  statTitle: PropTypes.string.isRequired,\n  options: PropTypes.object,\n  series: PropTypes.array.isRequired,\n  type: PropTypes.string,\n  height: PropTypes.string,\n  className: PropTypes.string\n}\n\n// ** Default Props\nStatsWithAreaChart.defaultProps = {\n  options: areaChartOptions,\n  color: 'primary'\n}\n","// ** Area Chart Common Options\nexport const areaChartOptions = {\n  chart: {\n    toolbar: {\n      show: false\n    },\n    sparkline: {\n      enabled: true\n    }\n  },\n  grid: {\n    show: false\n  },\n  colors: ['#7367F0'],\n  dataLabels: {\n    enabled: false\n  },\n  stroke: {\n    curve: 'smooth',\n    width: 2.5\n  },\n  fill: {\n    type: 'gradient',\n    gradient: {\n      shadeIntensity: 0.9,\n      opacityFrom: 0.7,\n      opacityTo: 0.5,\n      stops: [0, 80, 100]\n    }\n  },\n  xaxis: {\n    labels: {\n      show: false\n    },\n    axisBorder: {\n      show: false\n    }\n  },\n  yaxis: {\n    labels: {\n      show: false\n    }\n  },\n  tooltip: {\n    x: { show: false }\n  }\n}\n\n// ** Line Chart Common Options\nexport const lineChartOptions = {\n  chart: {\n    toolbar: {\n      show: false\n    },\n    sparkline: {\n      enabled: true\n    },\n    dropShadow: {\n      enabled: true,\n      top: 5,\n      left: 0,\n      blur: 4,\n      opacity: 0.1\n    }\n  },\n  grid: {\n    show: false\n  },\n  colors: ['#7367F0'],\n  dataLabels: {\n    enabled: false\n  },\n  stroke: {\n    curve: 'smooth',\n    width: 5\n  },\n  fill: {\n    type: 'gradient',\n    gradient: {\n      shadeIntensity: 1,\n      gradientToColors: ['#A9A2F6'],\n      opacityFrom: 1,\n      opacityTo: 1,\n      stops: [0, 100, 100, 100]\n    }\n  },\n\n  xaxis: {\n    labels: {\n      show: false\n    },\n    axisBorder: {\n      show: false\n    }\n  },\n  yaxis: {\n    labels: {\n      show: false\n    }\n  },\n  tooltip: {\n    x: { show: false }\n  }\n}\n","// @ts-nocheck\nimport { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport { Users } from 'react-feather'\nimport StatsWithAreaChart from '@components/widgets/stats/StatsWithAreaChart'\n\nconst SubscribersGained = ({ kFormatter, data, title = \"\", icon, color=\"primary\", warning }) => {\n  const [dataChart, setDataChart] = useState(null)\n  useEffect(() => {\n    axios.get('/card/card-statistics/subscribers').then(res => setDataChart(res.data))\n  }, [])\n\n  const options = {\n    chart: {\n      id: 'revenue',\n      toolbar: {\n        show: false\n      },\n      sparkline: {\n        enabled: true\n      }\n    },\n    grid: {\n      show: false\n    },\n    colors: [warning],\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      curve: 'smooth',\n      width: 2.5\n    },\n    fill: {\n      type: 'gradient',\n      gradient: {\n        shadeIntensity: 0.9,\n        opacityFrom: 0.7,\n        opacityTo: 0.5,\n        stops: [0, 80, 100]\n      }\n    },\n\n    xaxis: {\n      labels: {\n        show: false\n      },\n      axisBorder: {\n        show: false\n      }\n    },\n    yaxis: {\n      labels: {\n        show: false\n      }\n    },\n    tooltip: {\n      x: { show: false }\n    }\n  }\n\n  return data !== null  && dataChart !==null? (\n    <StatsWithAreaChart\n      icon={icon ? icon :<Users size={21} />}\n      color={color}\n      stats={kFormatter(data)}\n      statTitle={title}\n      series={dataChart.series}\n      type='area'\n      options={options}\n    />\n  ) : null\n}\n\nexport default SubscribersGained\n"],"sourceRoot":""}