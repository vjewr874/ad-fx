{"version":3,"sources":["pages/management-game-control/list/index.js"],"names":["unitOptions","value","label","DefaultFilter","filter","gameRecordUnit","skip","limit","order","key","GamePlay","intl","useIntl","getIntlText","formatMessage","id","serverSideColumns","name","selector","sortable","minWidth","cell","row","gameRecordSection","moment","format","gameRecordTypeUp","className","gameRecordTypeOdd","gameRecordPrice","gameRecordNote","width","gameRecordTypeDown","gameRecordTypeEven","gameRecordId","sm","onChange","e","type","handleUpdateData","data","checked","check","inline","useState","paramsFilter","setParamsFilter","modalMany","setModalMany","currentPage","setCurrentPage","rowsPerPage","total","setTotal","items","setItems","isLoading","setIsLoading","useForm","defaultValues","register","errors","handleSubmit","userData","setUserData","getData","params","isNoLoading","newParams","Object","keys","forEach","token","window","localStorage","getItem","newToken","replace","Service","send","method","path","query","headers","Authorization","then","res","statusCode","message","toast","warn","clear","item","messageSuccess","success","_","debounce","useEffect","columns","handleOnchange","target","handleFilterChange","bsSize","map","index","Ripple","style","height","color","size","onClick","gameRecordCount","noHeader","pagination","paginationServer","column","sortIcon","paginationComponent","count","Number","Math","ceil","toFixed","previousLabel","nextLabel","breakLabel","pageCount","marginPagesDisplayed","pageRangeDisplayed","activeClassName","forcePage","onPageChange","page","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","breakClassName","breakLinkClassName","containerClassName","progressPending","isOpen","toggle","onSubmit","marginBottom","for","innerRef","required","invalid","newDate","Date","listTime","push","add","getTime","memo"],"mappings":"8cA8BMA,EAAc,CAClB,CAAEC,MAAO,UAAWC,MAAO,OAC3B,CAAED,MAAO,UAAWC,MAAO,OAC3B,CAAED,MAAO,UAAWC,MAAO,OAC3B,CAAED,MAAO,UAAWC,MAAO,OAC3B,CAAED,MAAO,UAAWC,MAAO,OAC3B,CAAED,MAAO,WAAYC,MAAO,QAC5B,CAAED,MAAO,UAAWC,MAAO,OAC3B,CAAED,MAAO,UAAWC,MAAO,OAC3B,CAAED,MAAO,WAAYC,MAAO,QAC5B,CAAED,MAAO,UAAWC,MAAO,QAGvBC,EAAgB,CACpBC,OAAQ,CACNC,eAAgB,WAElBC,KAAM,EACNC,MAAO,GACPC,MAAO,CACLC,IAAK,YACLR,MAAO,SAILS,EAAW,WACf,IAAMC,EAAOC,cAEPC,EAAc,SAACZ,GACnB,OAAOU,EAAKG,cAAc,CACxBC,GAAId,KAYFe,EAAoB,CACxB,CACEC,KAAM,UACNC,SAAU,eACVC,UAAU,GAEZ,CACEF,KAAM,oBACNC,SAAU,oBACVC,UAAU,EACVC,SAAU,QACVC,KAAM,SAACC,GAAS,IACNC,EAAsBD,EAAtBC,kBAER,OACE,8BACGC,IAAOD,EAAmB,gBAAgBE,OAAO,oBAK1D,CACER,KAAM,MACNC,SAAU,mBACVC,UAAU,EACVE,KAAM,SAACC,GAAS,IACNI,EAAqBJ,EAArBI,iBAER,OACE,qBACEC,UACED,EAAmB,mBAAqB,qBAF5C,SAKGA,EAAmB,IAAM,QAKlC,CACET,KAAM,oBACNC,SAAU,mBACVC,UAAU,EACVE,KAAM,SAACC,GAAS,IACNM,EAAsBN,EAAtBM,kBAER,OACE,qBACED,UACEC,EAAoB,oBAAsB,qBAF9C,SAKGA,EAAoB,IAAM,QAKnC,CACEX,KAAM,kBACNC,SAAU,kBACVC,UAAU,EACVC,SAAU,QACVC,KAAM,SAACC,GAAS,IACNO,EAAoBP,EAApBO,gBAER,OACE,8BAIGA,MAKT,CACEZ,KAAM,aACNC,SAAU,iBACVC,UAAU,EACVC,SAAU,QACVC,KAAM,SAACC,GAAS,IACNQ,EAAmBR,EAAnBQ,eAER,OAAO,8BAAMA,MAGjB,CACEb,KAAM,yBACNC,SAAU,SACVa,MAAO,MACPV,KAAM,SAACC,GAAS,IAAD,EAEXI,EAKEJ,EALFI,iBACAM,EAIEV,EAJFU,mBACAJ,EAGEN,EAHFM,kBACAK,EAEEX,EAFFW,mBACAC,EACEZ,EADFY,aAGF,OACE,mCACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAWZ,KAAG,EAACK,UAAU,oBAAzB,UACE,cAAC,IAAD,CAAKQ,GAAI,EAAT,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,KAAD,GACEC,SAAU,SAACC,KACXC,KAAK,QACLrB,KAAK,sBAHP,0BAKY,SAACoB,GACTE,GAAiB,CACfxB,GAAImB,EACJM,KAAM,CACJd,iBAAkB,EAClBM,mBAAoB,QAV5B,wBAcgC,IAArBN,GAdX,IAgBA,qBAAKC,UAAU,cAAf,SACE,+BAEE,wDAMV,cAAC,IAAD,CAAKQ,GAAI,EAAT,SACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAOR,UAAU,eAAjB,UACE,cAAC,IAAD,CACEW,KAAK,QACLrB,KAAK,mBACLmB,SAAU,SAACC,GACTE,GAAiB,CACfxB,GAAImB,EACJM,KAAM,CACJd,iBAAkB,EAClBM,mBAAoB,MAI1BS,QAAgC,IAAvBT,IAEX,qBAAKL,UAAU,YAAf,SACE,sDAQR,cAAC,IAAD,CAAKQ,GAAI,EAAT,SACE,cAAC,IAAD,CAAWO,OAAK,EAACC,QAAM,EAAvB,SACE,eAAC,IAAD,CAAOD,OAAK,EAAZ,UACE,cAAC,IAAD,CACEN,SAAU,SAACC,GACTE,GAAiB,CACfxB,GAAImB,EACJM,KAAM,CACJZ,kBAAmB,EACnBK,mBAAoB,MAI1BK,KAAK,QACLrB,KAAK,qBACLwB,QAA+B,IAAtBb,IAEX,qBAAKD,UAAU,cAAf,SACE,oDAQR,cAAC,IAAD,CAAKQ,GAAI,EAAT,SACE,cAAC,IAAD,CAAWO,OAAK,EAACC,QAAM,EAAvB,SACE,eAAC,IAAD,CAAOD,OAAK,EAAZ,UACE,cAAC,IAAD,CACEN,SAAU,SAACC,GACTE,GAAiB,CACfxB,GAAImB,EACJM,KAAM,CACJZ,kBAAmB,EACnBK,mBAAoB,MAI1BK,KAAK,QACLrB,KAAK,qBACLwB,QAAgC,IAAvBR,IACR,IACH,qBAAKN,UAAU,YAAf,SACE,gEA1ND,EAyOmBiB,mBAASzC,GAzO5B,mBAyOd0C,EAzOc,KAyOAC,EAzOA,OA4OKF,oBAAS,GA5Od,gCA6OaA,oBAAS,IA7OtB,mBA6OdG,EA7Oc,KA6OHC,EA7OG,OA8OiBJ,mBAAS,GA9O1B,mBA8OdK,EA9Oc,KA8ODC,EA9OC,OA+OiBN,mBAAS,IA/O1B,mBA+OdO,EA/Oc,aAgPKP,mBAAS,KAhPd,mBAgPdQ,EAhPc,KAgPPC,EAhPO,OAiPKT,mBAAS,IAjPd,mBAiPdU,EAjPc,KAiPPC,GAjPO,QAkPaX,oBAAS,GAlPtB,qBAkPdY,GAlPc,MAkPHC,GAlPG,SAmPmBb,oBAAS,GAnP5B,qCAoPiBA,mBAAS,KApP1B,qCAsPsBc,YAAQ,CACjDC,cAAe,MADTC,GAtPa,GAsPbA,SAAUC,GAtPG,GAsPHA,OAAQC,GAtPL,GAsPKA,aAtPL,GAyPWlB,mBAAS,IAzPpB,qBAyPdmB,GAzPc,MAyPJC,GAzPI,MA2PrB,SAASC,GAAQC,EAAQC,GACvB,IAAMC,EAAS,eACVF,GAEAC,GACHV,IAAa,GAEfY,OAAOC,KAAKF,EAAUhE,QAAQmE,SAAQ,SAAC9D,GAChC2D,EAAUhE,OAAOK,IAAkC,KAA1B2D,EAAUhE,OAAOK,WACtC2D,EAAUhE,OAAOK,MAG5B,IAAM+D,EAAQC,OAAOC,aAAaC,QAAQ,eAE1C,GAAIH,EAAO,CACT,IAAMI,EAAWJ,EAAMK,QAAQ,KAAM,IAErCC,IAAQC,KAAK,CACXC,OAAQ,OACRC,KAAM,mBACNzC,KAAM4B,EACNc,MAAO,KACPC,QAAS,CACPC,cAAe,UAAYR,KAE5BS,MAAK,SAACC,GACP,GAAIA,EAAK,CAAC,IACAC,EAA8BD,EAA9BC,WAAY/C,EAAkB8C,EAAlB9C,KAAMgD,EAAYF,EAAZE,QAC1B1C,EAAgBsB,GACG,MAAfmB,GACFlC,EAASb,EAAKY,OACdG,GAASf,EAAKA,OAEdiD,IAAMC,KAAKF,GAAW3E,EAAY,yBAGpCwC,EAAS,GACTE,GAAS,IAENY,GACHV,IAAa,WAIjBgB,OAAOC,aAAaiB,QAoBxB,SAASpD,GAAiBqD,EAAMC,GAC9Bf,IAAQC,KAAK,CACXC,OAAQ,OACRC,KAAM,yBACNzC,KAAMoD,EACNV,MAAO,OACNG,MAAK,SAACC,GACP,GAAIA,EAAK,CAAC,IACAC,EAAwBD,EAAxBC,WAAYC,EAAYF,EAAZE,QACD,MAAfD,GACFE,IAAMK,QACJD,EAAiBhF,EAAYgF,GAAkB,uCAEjD5B,GAAQpB,IAER4C,IAAMC,KAAKF,GAAW3E,EAAY,wBA4DpBkF,IAAEC,UAAS,SAAC9B,GAChCD,GAAQC,GAAQ,KACf,KAGH+B,qBAAU,WACRhC,GAAQpB,KACP,IAKH,IAzYsBqD,GAwdhBC,GAAiB,SAAClF,EAAMhB,GAC5B+D,GAAY,2BACPD,IADM,kBAER9C,EAAOhB,MAIZ,OACE,cAAC,WAAD,UACE,eAAC,IAAD,CAAM0B,UAAU,eAAhB,UACE,eAAC,IAAD,CAAKA,UAAU,kBAAf,UACE,cAAC,IAAD,CAAKQ,GAAG,IAAR,SACE,cAAC,IAAD,CACEC,SAAU,SAACC,GAAO,IAAD,EACSA,EAAE+D,QA5Db,SAACnF,EAAMhB,GAShCgE,GARe,2BACVpB,GADU,IAEbzC,OAAO,2BACFyC,EAAazC,QADZ,kBAEHa,EAAOhB,IAEVK,KAAM,KAsDI+F,CAFe,EACPpF,KADO,EACDhB,QAGhBqC,KAAK,SACLrC,MACE4C,EAAazC,QACTyC,EAAazC,OAAOC,gBACpB,GAENY,KAAK,iBACLqF,OAAO,KAZT,SAcGtG,EAAYuG,KAAI,SAACX,EAAMY,GACtB,OACE,wBAAQvG,MAAO2F,EAAK3F,MAApB,SACG2F,EAAK1F,OADwBsG,UAOxC,cAAC,IAAD,IACA,cAAC,IAAD,CAAKrE,GAAG,IAAR,SACE,cAAC,IAAOsE,OAAR,CACEC,MAAO,CAAE3E,MAAO,OAAQ4E,OAAQ,QAChCC,MAAM,UACNC,KAAK,KACLC,QAAS,WACP9D,GAAa,GACbgB,GAAY,CACV3D,eAAgB,UAChB0G,gBAAiB,GACjBxF,kBAAmBC,MAASC,OAAO,SAAW,SATpD,SAcE,4DAIN,cAAC,IAAD,CACEuF,UAAQ,EACRC,YAAU,EACVC,kBAAgB,EAEhBvF,UAAU,+BACVuE,SArhBcA,GAqhBQlF,EAphBrBkF,GAAQK,KAAI,SAACY,GAAD,mBAAC,eACfA,GADc,IAGjBlG,KAAMkG,EAAOlG,WAkhBTmG,SAAU,cAAC,IAAD,CAAaP,KAAM,KAC7BQ,oBAhGiB,WACvB,IAAMC,EAAQC,OAAOC,KAAKC,KAAKrE,EAAQD,GAAauE,QAAQ,IAE5D,OACE,cAAC,IAAD,CACEC,cAAe,GACfC,UAAW,GACXC,WAAW,MACXC,UAAWR,GAAS,EACpBS,qBAAsB,EACtBC,mBAAoB,EACpBC,gBAAgB,SAChBC,UAA2B,IAAhBjF,EAAoBA,EAAc,EAAI,EACjDkF,aAAc,SAACC,GAAD,OA3DK,SAACA,GAKxBnE,GAJe,2BACVpB,GADU,IAEbvC,KAAM8H,EAAKC,SAAWxF,EAAatC,SAGrC2C,EAAekF,EAAKC,SAAW,GAqDHC,CAAiBF,IACzCG,cAAe,YACfC,kBAAmB,YACnBC,cAAe,iBACfC,kBAAmB,iBACnBC,sBAAuB,YACvBC,kBAAmB,YACnBC,eAAe,YACfC,mBAAmB,YACnBC,mBACE,gGA0EAvG,KAAMc,EACN0F,gBAAiBxF,KAEnB,eAAC,IAAD,CACEyF,OAAQlG,EACRmG,OAAQ,kBAAMlG,GAAa,IAC3BrB,UAAS,yBAHX,UAKE,cAAC,IAAD,CAAauH,OAAQ,kBAAMlG,GAAa,IAAxC,SACE,uFAEF,cAAC,IAAD,UACE,eAAC,IAAD,CACEmG,SAAUrF,IAAa,WA/LnC,IAA2B8B,EAAMC,EAAND,EAgMK7B,GA/L9Be,IAAQC,KAAK,CACXC,OAAQ,OACRC,KAAM,yBACNzC,KAAMoD,EACNV,MAAO,OACNG,MAAK,SAACC,GACP,GAAIA,EAAK,CAAC,IACAC,EAAwBD,EAAxBC,WAAYC,EAAYF,EAAZE,QACD,MAAfD,GACFE,IAAMK,QAEAjF,EADJgF,GAEgB,2BAElB5B,GAAQpB,IAER4C,IAAMC,KAAKF,GAAW3E,EAAY,wBAgL5BmC,GAAa,MAHjB,UAME,eAAC,IAAD,CAAW0D,MAAO,CAAE0C,aAAc,QAAlC,UACE,cAAC,IAAD,CAAOC,IAAI,oBAAX,+BACA,cAAC,IAAD,CACE/G,KAAK,SACLrB,KAAK,oBACLqI,SAAU1F,GAAS,CAAE2F,UAAU,IAC/BC,QAAS3F,GAAOtC,oBAAqB,EACrCtB,MAAO8D,GAASxC,kBAChBa,SAAU,SAACC,GAAO,IAAD,EACSA,EAAE+D,OAAlBnF,EADO,EACPA,KAAMhB,EADC,EACDA,MACdkG,GAAelF,EAAMhB,IARzB,SArOd,SAAiBiE,GAGf,IAFA,IAAMuF,EAAU,IAAIC,KACdC,EAAW,GACRnD,EAAQ,EAAGA,GAAS,GAAIA,IAC/BmD,EAASC,KAAKpI,IAAOiI,GAASI,IAAIrD,EAAO,WAAW/E,OAAO,aAE7D,OAAOkI,EA0OQG,GAAUvD,KAAI,SAACX,EAAMY,GACpB,OACE,wBAAQvG,MAAO2F,EAAf,SACGA,GADuBY,WAQlC,eAAC,IAAD,CAAWE,MAAO,CAAE0C,aAAc,QAAlC,UACE,cAAC,IAAD,sCACA,eAAC,IAAD,CACE9G,KAAK,SACLrB,KAAK,kBACLqI,SAAU1F,GAAS,CAAE2F,UAAU,IAC/BC,QAAS3F,GAAOkD,kBAAmB,EACnC9G,MAAO8D,GAASgD,gBAChB3E,SAAU,SAACC,GAAO,IAAD,EACSA,EAAE+D,OAAlBnF,EADO,EACPA,KAAMhB,EADC,EACDA,MACdkG,GAAelF,EAAMhB,IARzB,UAWE,wBAAQA,MAAO,GAAf,gBACA,wBAAQA,MAAO,GAAf,gBACA,wBAAQA,MAAO,GAAf,gBACA,wBAAQA,MAAO,GAAf,gBACA,wBAAQA,MAAO,GAAf,sBAIJ,eAAC,IAAD,CAAWyG,MAAO,CAAE0C,aAAc,QAAlC,UACE,cAAC,IAAD,oCACA,cAAC,IAAD,CACE9G,KAAK,SACLrB,KAAK,iBACLqI,SAAU1F,GAAS,CAAE2F,UAAU,IAC/BC,QAAS3F,GAAOxD,iBAAkB,EAClCJ,MAAO8D,GAAS1D,eAChB+B,SAAU,SAACC,GAAO,IAAD,EACSA,EAAE+D,OAAlBnF,EADO,EACPA,KAAMhB,EADC,EACDA,MACdkG,GAAelF,EAAMhB,IARzB,SAWGD,EAAYuG,KAAI,SAACX,EAAMY,GACtB,OACE,wBAAQvG,MAAO2F,EAAK3F,MAApB,SACG2F,EAAK1F,OADwBsG,WAQxC,cAAC,IAAD,CAAW7E,UAAU,cAArB,SACE,cAAC,IAAO8E,OAAR,CAAe9E,UAAU,OAAOiF,MAAM,UAAUtE,KAAK,SAArD,8CAYDyH,yBAAKrJ,I","file":"static/js/76.16c6dbc0.chunk.js","sourcesContent":["// @ts-nocheck\n// ** React Imports\nimport { Fragment, useState, useEffect, memo } from \"react\";\n// ** Store & Actions\nimport { toast } from \"react-toastify\";\nimport _ from \"lodash\";\nimport \"./styles/styles.scss\";\nimport { useForm } from \"react-hook-form\";\n// import \"@styles/react/libs/tables/react-dataTable-component.scss\";\nimport Service from \"../../../services/request\";\nimport ReactPaginate from \"react-paginate\";\nimport { ChevronDown } from \"react-feather\";\nimport DataTable from \"react-data-table-component\";\nimport {\n  Card,\n  Input,\n  Label,\n  Row,\n  Col,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Button,\n  FormGroup,\n  Form,\n} from \"reactstrap\";\nimport moment from \"moment\";\nimport \"@styles/react/libs/flatpickr/flatpickr.scss\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\n\nconst unitOptions = [\n  { value: \"BTC-USD\", label: \"BTC\" },\n  { value: \"ETH-USD\", label: \"ETH\" },\n  { value: \"YFI-USD\", label: \"YFI\" },\n  { value: \"BNB-USD\", label: \"BNB\" },\n  { value: \"LTC-USD\", label: \"LTC\" },\n  { value: \"DASH-USD\", label: \"DASH\" },\n  { value: \"SOL-USD\", label: \"SOL\" },\n  { value: \"AXS-USD\", label: \"AXS\" },\n  { value: \"PAXG-USD\", label: \"PAXG\" },\n  { value: \"XRP-USD\", label: \"XRP\" },\n];\n\nconst DefaultFilter = {\n  filter: {\n    gameRecordUnit: \"BTC-USD\",\n  },\n  skip: 0,\n  limit: 20,\n  order: {\n    key: \"createdAt\",\n    value: \"desc\",\n  },\n};\nconst List_Search_Filter = [\"username\", \"email\", \"referUser\", \"phoneNumber\"];\nconst GamePlay = () => {\n  const intl = useIntl();\n\n  const getIntlText = (value) => {\n    return intl.formatMessage({\n      id: value,\n    });\n  };\n\n  const formatColumn = (columns) => {\n    return columns.map((column) => ({\n      ...column,\n      // name: column.name ? getIntlText(column.name) : \"\",\n      name: column.name,\n    }));\n  };\n  // ** Store Vars\n  const serverSideColumns = [\n    {\n      name: \"STT(ID)\",\n      selector: \"gameRecordId\",\n      sortable: true,\n    },\n    {\n      name: \"kỲ CHƠI\",\n      selector: \"gameRecordSection\",\n      sortable: true,\n      minWidth: \"150px\",\n      cell: (row) => {\n        const { gameRecordSection } = row;\n\n        return (\n          <div>\n            {moment(gameRecordSection, \"YYYYMMDDHHmm\").format(\"YYYYMMDDHHmm\")}\n          </div>\n        );\n      },\n    },\n    {\n      name: \"T/G\",\n      selector: \"gameRecordStatus\",\n      sortable: true,\n      cell: (row) => {\n        const { gameRecordTypeUp } = row;\n\n        return (\n          <div\n            className={\n              gameRecordTypeUp ? \"gameRecordTypeUp\" : \"gameRecordTypeDonw\"\n            }\n          >\n            {gameRecordTypeUp ? \"T\" : \"G\"}\n          </div>\n        );\n      },\n    },\n    {\n      name: \"CHẴN/LẺ\",\n      selector: \"gameRecordStatus\",\n      sortable: true,\n      cell: (row) => {\n        const { gameRecordTypeOdd } = row;\n\n        return (\n          <div\n            className={\n              gameRecordTypeOdd ? \"gameRecordTypeOdd\" : \"gameRecordTypeEven\"\n            }\n          >\n            {gameRecordTypeOdd ? \"L\" : \"C\"}\n          </div>\n        );\n      },\n    },\n    {\n      name: \"GIÁ TRỊ\",\n      selector: \"gameRecordPrice\",\n      sortable: true,\n      minWidth: '120px',\n      cell: (row) => {\n        const { gameRecordPrice } = row;\n\n        return (\n          <div>\n            {/* {`${gameRecordPrice.charAt(\n              gameRecordPrice.length - 2\n            )}${gameRecordPrice.charAt(gameRecordPrice.length - 1)}`} */}\n            {gameRecordPrice}\n          </div>\n        );\n      },\n    },\n    {\n      name: \"GHI CHÚ\",\n      selector: \"gameRecordNote\",\n      sortable: true,\n      minWidth: '120px',\n      cell: (row) => {\n        const { gameRecordNote } = row;\n\n        return <div>{gameRecordNote}</div>;\n      },\n    },\n    {\n      name: \"HÀNH ĐỘNG\",\n      selector: \"action\",\n      width: \"39%\",\n      cell: (row) => {\n        const {\n          gameRecordTypeUp,\n          gameRecordTypeDown,\n          gameRecordTypeOdd,\n          gameRecordTypeEven,\n          gameRecordId,\n        } = row;\n\n        return (\n          <>\n            <Form>\n              <FormGroup row className=\"custom-form-group\">\n                <Col sm={3}>\n                  <FormGroup>\n                    <Label>\n                      <Input\n                        onChange={(e) => { }}\n                        type=\"radio\"\n                        name=\"gameRecordTypeDown\"\n                        // eslint-disable-next-line react/jsx-no-duplicate-props\n                        onChange={(e) => {\n                          handleUpdateData({\n                            id: gameRecordId,\n                            data: {\n                              gameRecordTypeUp: 1,\n                              gameRecordTypeDown: 0,\n                            },\n                          });\n                        }}\n                        checked={gameRecordTypeUp === 1 ? true : false}\n                      />\n                      <div className=\"label-green\">\n                        <span>\n                          {/* <FormattedMessage id=\"UP\" defaultMessage=\"Up\" /> */}\n                          <span>Tăng</span>\n                        </span>\n                      </div>\n                    </Label>\n                  </FormGroup>\n                </Col>\n                <Col sm={3}>\n                  <FormGroup>\n                    <Label className=\"custom-label\">\n                      <Input\n                        type=\"radio\"\n                        name=\"gameRecordTypeUp\"\n                        onChange={(e) => {\n                          handleUpdateData({\n                            id: gameRecordId,\n                            data: {\n                              gameRecordTypeUp: 0,\n                              gameRecordTypeDown: 1,\n                            },\n                          });\n                        }}\n                        checked={gameRecordTypeDown === 1 ? true : false}\n                      />\n                      <div className=\"label-red\">\n                        <span>\n                          {/* <FormattedMessage id=\"DOWN\" defaultMessage=\"Down\" /> */}\n                          Giảm\n                        </span>\n                      </div>\n                    </Label>\n                  </FormGroup>\n                </Col>\n                <Col sm={3}>\n                  <FormGroup check inline>\n                    <Label check>\n                      <Input\n                        onChange={(e) => {\n                          handleUpdateData({\n                            id: gameRecordId,\n                            data: {\n                              gameRecordTypeOdd: 1,\n                              gameRecordTypeEven: 0,\n                            },\n                          });\n                        }}\n                        type=\"radio\"\n                        name=\"gameRecordTypeEven\"\n                        checked={gameRecordTypeOdd === 1 ? true : false}\n                      />\n                      <div className=\"label-green\">\n                        <span>\n                          {/* <FormattedMessage id=\"ODD\" defaultMessage=\"Odd\" /> */}\n                          Lẻ\n                        </span>\n                      </div>\n                    </Label>\n                  </FormGroup>\n                </Col>\n                <Col sm={3}>\n                  <FormGroup check inline>\n                    <Label check>\n                      <Input\n                        onChange={(e) => {\n                          handleUpdateData({\n                            id: gameRecordId,\n                            data: {\n                              gameRecordTypeOdd: 0,\n                              gameRecordTypeEven: 1,\n                            },\n                          });\n                        }}\n                        type=\"radio\"\n                        name=\"gameRecordTypeEven\"\n                        checked={gameRecordTypeEven === 1 ? true : false}\n                      />{\" \"}\n                      <div className=\"label-red\">\n                        <span>\n                          {/* <FormattedMessage id=\"EVEN\" defaultMessage=\"Even\" /> */}\n                          Chẵn\n                        </span>\n                      </div>\n                    </Label>\n                  </FormGroup>\n                </Col>\n              </FormGroup>\n            </Form>\n          </>\n        );\n      },\n    },\n  ];\n  const [paramsFilter, setParamsFilter] = useState(DefaultFilter);\n  // ** States\n\n  const [modal, setModal] = useState(false);\n  const [modalMany, setModalMany] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [rowsPerPage, setRowsPerPage] = useState(20);\n  const [total, setTotal] = useState(20);\n  const [items, setItems] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const [sectionList, setSectionList] = useState([]);\n  // ** React hook form vars\n  const { register, errors, handleSubmit } = useForm({\n    defaultValues: {},\n  });\n  const [userData, setUserData] = useState({});\n\n  function getData(params, isNoLoading) {\n    const newParams = {\n      ...params,\n    };\n    if (!isNoLoading) {\n      setIsLoading(true);\n    }\n    Object.keys(newParams.filter).forEach((key) => {\n      if (!newParams.filter[key] || newParams.filter[key] === \"\") {\n        delete newParams.filter[key];\n      }\n    });\n    const token = window.localStorage.getItem(\"accessToken\");\n\n    if (token) {\n      const newToken = token.replace(/\"/g, \"\");\n\n      Service.send({\n        method: \"POST\",\n        path: \"/GameRecord/find\",\n        data: newParams,\n        query: null,\n        headers: {\n          Authorization: `Bearer ` + newToken,\n        },\n      }).then((res) => {\n        if (res) {\n          const { statusCode, data, message } = res;\n          setParamsFilter(newParams);\n          if (statusCode === 200) {\n            setTotal(data.total);\n            setItems(data.data);\n          } else {\n            toast.warn(message || getIntlText(\"SOMETHING_WRONG\"));\n          }\n        } else {\n          setTotal(1);\n          setItems([]);\n        }\n        if (!isNoLoading) {\n          setIsLoading(false);\n        }\n      });\n    } else {\n      window.localStorage.clear();\n    }\n  }\n\n  function handleFetchSection() {\n    Service.send({\n      method: \"POST\",\n      path: \"/Game/gameSectionList\",\n      data: {},\n      query: null,\n    }).then((res) => {\n      if (res) {\n        const { statusCode, data } = res;\n        if (statusCode === 200) {\n          setSectionList(data.data);\n        }\n      }\n    });\n  }\n\n  function handleUpdateData(item, messageSuccess) {\n    Service.send({\n      method: \"POST\",\n      path: \"/GameRecord/updateById\",\n      data: item,\n      query: null,\n    }).then((res) => {\n      if (res) {\n        const { statusCode, message } = res;\n        if (statusCode === 200) {\n          toast.success(\n            messageSuccess ? getIntlText(messageSuccess) : \"Cập nhật thành công\"\n          );\n          getData(paramsFilter);\n        } else {\n          toast.warn(message || getIntlText(\"SOMETHING_WRONG\"));\n        }\n      }\n    });\n  }\n\n  function getTime(params) {\n    const newDate = new Date();\n    const listTime = [];\n    for (let index = 1; index <= 60; index++) {\n      listTime.push(moment(newDate).add(index, \"minutes\").format(\"HH:mm:00\"));\n    }\n    return listTime;\n  }\n  function handleAddData(item, messageSuccess) {\n    Service.send({\n      method: \"POST\",\n      path: \"Game/insert\",\n      data: item,\n      query: null,\n    }).then((res) => {\n      if (res) {\n        const { statusCode, message } = res;\n        if (statusCode === 200) {\n          toast.success(\n            messageSuccess\n              ? getIntlText(messageSuccess)\n              : getIntlText(\"ADD_GAME_CONTROL\")\n          );\n          getData(paramsFilter);\n        } else {\n          toast.warn(message || getIntlText(\"SOMETHING_WRONG\"));\n        }\n      }\n    });\n  }\n\n  function handleAddDataMany(item, messageSuccess) {\n    Service.send({\n      method: \"POST\",\n      path: \"/GameRecord/insertMany\",\n      data: item,\n      query: null,\n    }).then((res) => {\n      if (res) {\n        const { statusCode, message } = res;\n        if (statusCode === 200) {\n          toast.success(\n            messageSuccess\n              ? getIntlText(messageSuccess)\n              : getIntlText(\"ADD_MANY_GAMES_CONTROL\")\n          );\n          getData(paramsFilter);\n        } else {\n          toast.warn(message || getIntlText(\"SOMETHING_WRONG\"));\n        }\n      }\n    });\n  }\n\n  const getDataSearch = _.debounce((params) => {\n    getData(params, true);\n  }, 2000);\n\n  // ** Get data on mount\n  useEffect(() => {\n    getData(paramsFilter);\n  }, []);\n\n  // ** Function to handle filter\n\n  // ** Function to handle Pagination and get data\n  const handlePagination = (page) => {\n    const newParams = {\n      ...paramsFilter,\n      skip: page.selected * paramsFilter.limit,\n    };\n    getData(newParams);\n    setCurrentPage(page.selected + 1);\n  };\n\n  // ** Function to handle per page\n  const handlePerPage = (e) => {\n    const newParams = {\n      ...paramsFilter,\n      limit: parseInt(e.target.value),\n      skip: 0,\n    };\n    getData(newParams);\n    setCurrentPage(1);\n    setRowsPerPage(parseInt(e.target.value));\n  };\n\n  const handleChangeSearchField = (filed) => {\n    const newParams = {\n      ...paramsFilter,\n      skip: 0,\n    };\n    List_Search_Filter.forEach((text) => {\n      delete newParams.filter[text];\n    });\n    newParams.filter[filed] = \"\";\n    getData(newParams);\n  };\n\n  const handleFilterChange = (name, value) => {\n    const newParams = {\n      ...paramsFilter,\n      filter: {\n        ...paramsFilter.filter,\n        [name]: value,\n      },\n      skip: 0,\n    };\n    getData(newParams);\n  };\n\n  // ** Custom Pagination\n  const CustomPagination = () => {\n    const count = Number(Math.ceil(total / rowsPerPage).toFixed(0));\n\n    return (\n      <ReactPaginate\n        previousLabel={\"\"}\n        nextLabel={\"\"}\n        breakLabel=\"...\"\n        pageCount={count || 1}\n        marginPagesDisplayed={2}\n        pageRangeDisplayed={2}\n        activeClassName=\"active\"\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\n        onPageChange={(page) => handlePagination(page)}\n        pageClassName={\"page-item\"}\n        nextLinkClassName={\"page-link\"}\n        nextClassName={\"page-item next\"}\n        previousClassName={\"page-item prev\"}\n        previousLinkClassName={\"page-link\"}\n        pageLinkClassName={\"page-link\"}\n        breakClassName=\"page-item\"\n        breakLinkClassName=\"page-link\"\n        containerClassName={\n          \"pagination react-paginate separated-pagination pagination-sm justify-content-end pr-1 mt-1\"\n        }\n      />\n    );\n  };\n\n  const toggleDropDown = () => {\n    setDropdownOpen(!dropdownOpen);\n  };\n\n  const handleOnchange = (name, value) => {\n    setUserData({\n      ...userData,\n      [name]: value,\n    });\n  };\n\n  return (\n    <Fragment>\n      <Card className=\"accountAdmin\">\n        <Row className=\"mx-0 mt-1 mb-50\">\n          <Col sm=\"3\">\n            <Input\n              onChange={(e) => {\n                const { name, value } = e.target;\n                handleFilterChange(name, value);\n              }}\n              type=\"select\"\n              value={\n                paramsFilter.filter\n                  ? paramsFilter.filter.gameRecordUnit || \"\"\n                  : \"\"\n              }\n              name=\"gameRecordUnit\"\n              bsSize=\"md\"\n            >\n              {unitOptions.map((item, index) => {\n                return (\n                  <option value={item.value} key={index}>\n                    {item.label}\n                  </option>\n                );\n              })}\n            </Input>\n          </Col>\n          <Col />\n          <Col sm=\"2\">\n            <Button.Ripple\n              style={{ width: \"100%\", height: \"40px\" }}\n              color=\"primary\"\n              size=\"sm\"\n              onClick={() => {\n                setModalMany(true);\n                setUserData({\n                  gameRecordUnit: \"ETH-USD\",\n                  gameRecordCount: 10,\n                  gameRecordSection: moment().format(\"HH:mm\") + \":00\",\n                });\n              }}\n            >\n              {/* <FormattedMessage id=\"RECORDS\" defaultMessage=\"Records\" /> */}\n              <span>Tạo mới</span>\n            </Button.Ripple>\n          </Col>\n        </Row>\n        <DataTable\n          noHeader\n          pagination\n          paginationServer\n          // className=\"react-dataTable\"\n          className=\"datatable-custom-project p-0\"\n          columns={formatColumn(serverSideColumns)}\n          sortIcon={<ChevronDown size={10} />}\n          paginationComponent={CustomPagination}\n          data={items}\n          progressPending={isLoading}\n        />\n        <Modal\n          isOpen={modalMany}\n          toggle={() => setModalMany(false)}\n          className={`modal-dialog-centered `}\n        >\n          <ModalHeader toggle={() => setModalMany(false)}>\n            <span>Thêm nhiều điều khiển game</span>\n          </ModalHeader>\n          <ModalBody>\n            <Form\n              onSubmit={handleSubmit(() => {\n                handleAddDataMany(userData);\n                setModalMany(false);\n              })}\n            >\n              <FormGroup style={{ marginBottom: \"12px\" }}>\n                <Label for=\"gameRecordSection\">Kỳ chơi</Label>\n                <Input\n                  type=\"select\"\n                  name=\"gameRecordSection\"\n                  innerRef={register({ required: true })}\n                  invalid={errors.gameRecordSection && true}\n                  value={userData.gameRecordSection}\n                  onChange={(e) => {\n                    const { name, value } = e.target;\n                    handleOnchange(name, value);\n                  }}\n                >\n                  {getTime().map((item, index) => {\n                    return (\n                      <option value={item} key={index}>\n                        {item}\n                      </option>\n                    );\n                  })}\n                </Input>\n              </FormGroup>\n\n              <FormGroup style={{ marginBottom: \"12px\" }}>\n                <Label>Số lượng</Label>\n                <Input\n                  type=\"select\"\n                  name=\"gameRecordCount\"\n                  innerRef={register({ required: true })}\n                  invalid={errors.gameRecordCount && true}\n                  value={userData.gameRecordCount}\n                  onChange={(e) => {\n                    const { name, value } = e.target;\n                    handleOnchange(name, value);\n                  }}\n                >\n                  <option value={10}>10</option>\n                  <option value={20}>20</option>\n                  <option value={30}>30</option>\n                  <option value={40}>40</option>\n                  <option value={50}>50</option>\n                </Input>\n              </FormGroup>\n\n              <FormGroup style={{ marginBottom: \"12px\" }}>\n                <Label>Đơn vị</Label>\n                <Input\n                  type=\"select\"\n                  name=\"gameRecordUnit\"\n                  innerRef={register({ required: true })}\n                  invalid={errors.gameRecordUnit && true}\n                  value={userData.gameRecordUnit}\n                  onChange={(e) => {\n                    const { name, value } = e.target;\n                    handleOnchange(name, value);\n                  }}\n                >\n                  {unitOptions.map((item, index) => {\n                    return (\n                      <option value={item.value} key={index}>\n                        {item.label}\n                      </option>\n                    );\n                  })}\n                </Input>\n              </FormGroup>\n\n              <FormGroup className=\"d-flex mb-0\">\n                <Button.Ripple className=\"mr-1\" color=\"primary\" type=\"submit\">\n                  Xác nhận\n                </Button.Ripple>\n              </FormGroup>\n            </Form>\n          </ModalBody>\n        </Modal>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default memo(GamePlay);\n"],"sourceRoot":""}